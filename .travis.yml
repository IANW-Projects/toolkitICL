language: c++

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

matrix:
  exclude:
    - os: osx
      compiler: gcc

dist: xenial

notifications:
  email: false

git:
  depth: 99999999

addons:
  apt: # apt-get for linux
    packages:
    # needed to build toolkitICL
    - libhdf5-dev
    - opencl-headers
    - ocl-icd-dev
    - ocl-icd-opencl-dev
    # get additional OpenCL info to debug tests
    - clinfo
    # # needed to log power on Intel CPUs/GPUs
    # - msr-tools
    # # get content of HDF5 files to test power logging
    # - hdf5-tools
  homebrew: # homebrew for osx
    packages:
    # needed to build toolkitICL
    - hdf5
    # get additional OpenCL info to debug tests
    - clinfo

before_script:
  # install Intel OpenCL on Linux
  - if [ $TRAVIS_OS_NAME = linux ]; then sudo bash .travis_install_intel_opencl.sh; fi
  # osx image does not contain cl.hpp file; download from Khronos
  # Because of the System Integrity Protection, we cannot write to /System/Library/Frameworks/OpenCL.framework.
  # -> Download the headers using cmake automatically.
  # - if [ ${TRAVIS_OS_NAME} == "osx" ]; then
  #     sudo cp -r /System/Library/Frameworks/OpenCL.framework /Library/Frameworks/OpenCL.framework;
  #     pushd /Library/Frameworks/OpenCL.framework/Headers/;
  #     sudo wget -w 1 https://github.com/KhronosGroup/OpenCL-CLHPP/releases/download/v2.0.10/cl2.hpp;
  #     popd;
  #     export OpenCL_INCLUDE_DIRS=/Library/Frameworks/OpenCL.framework/Headers;
  #   fi
  # - export OpenCL_ROOT="/Library/Frameworks/OpenCL.framework/";
  # - ls -R $OpenCL_ROOT;
  - if [ ${TRAVIS_OS_NAME} == "osx" ]; then
      ls -R /System/Library/Frameworks/OpenCL.framework;
    fi
  - clinfo
  # install Julia and add HDF5.jl;
  - if [ $TRAVIS_OS_NAME = linux ]; then
      CURL_USER_AGENT="Travis-CI $(curl --version | head -n 1)";
      mkdir -p ~/julia;
      curl -A "$CURL_USER_AGENT" -s -L --retry 7 'https://julialang-s3.julialang.org/bin/linux/x64/1.1/julia-1.1-latest-linux-x86_64.tar.gz' | tar -C ~/julia -x -z --strip-components=1 -f -;
      export PATH="${PATH}:${TRAVIS_HOME}/julia/bin";
      julia --color=yes -e "VERSION >= v\"0.7.0-DEV.3630\" && using InteractiveUtils; versioninfo()";
    fi
  - if [ ${TRAVIS_OS_NAME} == "osx" ]; then
      CURL_USER_AGENT="Travis-CI $(curl --version | head -n 1)";
      curl -A "$CURL_USER_AGENT" -s -L --retry 7 -o julia.dmg 'https://julialang-s3.julialang.org/bin/mac/x64/1.1/julia-1.1-latest-mac64.dmg';
      mkdir juliamnt;
      hdiutil mount -readonly -mountpoint juliamnt julia.dmg;
      cp -a juliamnt/*.app/Contents/Resources/julia ~/;
      export PATH="${PATH}:${TRAVIS_HOME}/julia/bin";
      julia --color=yes -e "VERSION >= v\"0.7.0-DEV.3630\" && using InteractiveUtils; versioninfo()";
    fi
  - julia -e "import Pkg; Pkg.add(\"HDF5\")"

script:
  # build without tests
  - mkdir build
  - cd build
  - cmake ..
  - if [ ${TRAVIS_OS_NAME} == "osx" ]; then
      ls -lhR ../include;
    fi
  - cmake --build .
  - export PATH=$PATH:$(pwd)/bin
  - toolkitICL -h
  # build with tests
  - cd ..
  - rm -rf build
  - mkdir build
  - cd build
  - cmake -DTESTS=ON ..
  - cmake --build .
  # run CMake tests
  - cmake --build . --target test
  # # test power logging
  # # instead of `sudo toolkitICL ...`, `sudo chmod o+rw /dev/cpu/0/msr` could be run once
  # - if [ $TRAVIS_OS_NAME = linux ]; then
  #     sudo modprobe msr;
  #     cd test;
  #     sudo ../bin/toolkitICL -b -isp 1000 -c repetition_test.h5;
  #     h5ls out_repetition_test.h5/Intel_HK || exit 1;
  #     h5dump -d Intel_HK/Cores0 out_repetition_test.h5 || exit 1;
  #     h5dump -d Intel_HK/DRAM0 out_repetition_test.h5 || exit 1;
  #     h5dump -d Intel_HK/GT0 out_repetition_test.h5 || exit 1;
  #     h5dump -d Intel_HK/Package0 out_repetition_test.h5 || exit 1;
  #     h5dump -d Intel_HK/Power_Time out_repetition_test.h5 || exit 1;
  #     h5dump -d Intel_HK/TDP out_repetition_test.h5 || exit 1;
  #     cd ..;
  #   fi
  # display test log
  - cat Testing/Temporary/LastTest.log
